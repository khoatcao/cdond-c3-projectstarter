# version: 2.1

# # orbs:
# #   mailer-orb: sudiptog81/mailer-orb@1.0.
# commands:
#   dependencies:
#     steps:  
#       - run:
#           name: Install test  asfasfnecessary packages to test  test continue asfafs asff test test
#           command: |
#             sudo apt update
#             sudo apt install -y tar gzip curl software-properties-common
#       - run:
#           name: Installing aws-cli test
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Installing ansible
#           command: |
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible

#   destroy-environment:
#     parameters:
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroying environment
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-backend-<< parameters.workflow_id >>"
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

#   revert-migrations:
#     parameters:
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Reverting migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
#             if (($SUCCESS == 1)); then
#               cd backend
#               npm install
#               npm run migrations:revert
#             fi
            

# jobs:
#   notify:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - slack/notify:
#           custom: |
#             {
#               "blocks": [
#                 {
#                   "type": "section",
#                   "fields": [
#                     {
#                       "type": "plain_text",
#                       "text": "*This is a text notification*",
#                       "emoji": true
#                     }
#                   ]
#                 }
#               ]
#             }
#           event: always
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout

#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end test
#           command: |
#             cd frontend 
#             npm install 
#             npm run build 
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build test
#           command: |
#             cd backend 
#             npm install 
#             npm run build 
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

    
#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0

#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Test front-end 
#           command: |
#             cd frontend
#             npm install 
#             npm run test 
    
                
#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Test Back-end
#           command: |
#             cd backend 
#             npm install 
#             npm run test 

  
#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: scan frontend 
#           command: |
#             cd frontend 
#             npm install
#             npm audit fix --audit-level=critical


#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: scan frontend 
#           command: |
#             cd backend 
#             npm install 
#             npm audit fix --audit-level=critical

#   deploy-infrastructure:
#     docker:
#       - image: cimg/base:2021.04
#     steps:
#       - checkout
#       - dependencies
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists test
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#               --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Ensure front-end infrastructure exist test
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#               --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Add back-end ip to ansible inventory test hello
#           command: |
#             aws cloudformation describe-stacks \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --query "Stacks[0].Outputs[0].OutputValue" \
#             --output text >> .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  


  
#   # configure-infrastructure:
#   #   docker:
#   #     - image: python:3.7-alpine3.11
#   #   steps:
#   #     - checkout
#   #     # Add ssh keys with fingerprint
#   #     - add_ssh_keys:
#   #         fingerprints: ["a2:bc:36:df:e2:ca:ed:35:10:e5:45:9c:49:9d:2e:6e"]
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           apk add curl
#   #           apk add --upgrade bash
#   #           apk add --update ansible
#   #           apk add openssh-client
#   #           pip3 install awscli
#   #     - run:
#   #         name: Configure server
#   #         command: |
#   #           # cat ~/project/.circleci/ansible/inventory.txt
#   #           export ANSIBLE_HOST_KEY_CHECKING=False
#   #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml    
#   #     - destroy-environment:
#   #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  



#   run-migrations:
#     docker:
#       - image: sleavely/node-awscli:14.x
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-backend
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm i
#             npm run build
#             npm run migrations > migrations_dump.txt
#             cat migrations_dump.txt
            
#       - run:
#           name: Sending migration status to kvdb
#           command: |
#             if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
#             then
#               curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
#                 -H "X-Api-Key: ${THISDB_API_KEY}" \
#                 -d "1"
#             else
#               curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
#                 -H "X-Api-Key: ${THISDB_API_KEY}" \
#                 -d "0"
#             fi
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

#   deploy-frontend:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#         name: Install dependencies
#         command: |
#           yum install -y tar gzip curl
#           curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#           yum install -y nodejs              

#       - run:
#         name: Install node
#         command: |
#           curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#           export NVM_DIR="$HOME/.nvm"
#           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#           nvm install 16

#       - run:
#         name: Install ansible and awscli
#         command: |
#           pip3 install ansible
#           pip3 install awscli

#       - run:
#         name: Get backend url
#         command: |
#           # your code here
#           export BACKEND_PUBLIC_IP=$(aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
#           export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
#           echo "${API_URL}"
#           echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
#           cat frontend/.env
      
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/frontend/.env
      
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#             cd frontend
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
#       # - revert-migrations
#       # - destroy-environment     
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: cimg/python:3.7-node
#     steps:
#       # Checkout code from git
#       - checkout       
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints: ["a2:bc:36:df:e2:ca:ed:35:10:e5:45:9c:49:9d:2e:6e"]
#       # attach workspace
#       - attach_workspace:
#           at: ~/

#       - run:
#           name: Install aws dependencies
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
# #              pip install --upgrade
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#             cd backend # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#             npm i
#             npm run build
#             cd ..
#             # Zip the directory
#             tar -C backend -czvf artifact.tar.gz .
#             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
#             mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml -v
#       # Here's where you will add some code to rollback on failure  
#       # - revert-migrations
#       #   workflow_id:
#       # - destroy-environment   
#       #   workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'    

#   smoke-test:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       # - run:
#       #     name: Install dependencies
#       #     command: |
#       #       yum -y install jq tar gzip git curl
#       # - install_awscli
#       - run:
#           name: Install AWS CLI 
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             # sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin

#       # - run:
#       #     name: Backend smoke test.
#       #     command: |
#       #       export BACKEND_PUBLIC_IP=$(aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
#       #       export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
#       #       echo "${API_URL}"  #   curl -s ${API_URL}/api/status -v 
#       #       if curl -s ${API_URL}/api/status | grep "ok"
#       #       then
#       #         exit 0
#       #       else
#       #         exit 1
#       #       fi       

#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
#             echo ${URL} 
#             if curl -s ${URL} | grep "Welcome"
#             then
#                 # Change this to 0 after the job fails
#               exit 0
#             else
#               exit 1
#             fi

   
#       # - destroy-environment  
#       # - revert-migrations
      


      
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend: 
#           requires: [build-frontend]

#       - test-backend: 
#           requires: [build-backend] 

#       - scan-frontend:
#           requires: [build-frontend] 
#       - scan-backend: 
#           requires: [build-backend]

#       - deploy-infrastructure:
#           requires: [test-frontend,test-backend,scan-frontend,scan-backend]

#       - configure-infrastructure: 
#           requires: [deploy-infrastructure]

#       - run-migrations:
#           requires: [deploy-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]

version: 2.1

# orbs:
#   mailer-orb: sudiptog81/mailer-orb@1.0.


commands:
  dependencies:
    steps:  
      - run:
          name: Install test  asfasfnecessary packages to test  test continue asfafs asff test test
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli test
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  # destroy-environment:
  #   parameters:
  #     workflow_id:
  #       type: string
  #   steps:
  #     - run:
  #         name: Destroying environment
  #         when: on_fail
  #         command: |
  #           aws cloudformation delete-stack \
  #             --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
  #           aws cloudformation delete-stack \
  #             --stack-name "udapeople-backend-<< parameters.workflow_id >>"
  #           aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

  # revert-migrations:
  #   parameters:
  #     workflow_id:
  #       type: string
  #   steps:
  #     - run:
  #         name: Reverting migrations
  #         when: on_fail
  #         command: |
  #           SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
  #           if (($SUCCESS == 1)); then
  #             cd backend
  #             npm install
  #             npm run migrations:revert
  #           fi
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws --region us-west-2 s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws --region us-west-2 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws --region us-west-2 cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  install_awscli:
    description: Install AWS CLI # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    steps:
      - run:
          name: Install tar and zip utilities
          command: |
            yum -y install tar gzip unzip zip python-dev
      - run:
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install -i /usr/local/aws-cli -b /usr/local/bin

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.Workflow_ID >>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi
         

jobs:
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end test
          command: |
            cd frontend 
            npm install 
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build test
          command: |
            cd backend 
            npm install 
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end 
          command: |
            cd frontend
            npm install 
            npm run test 
    
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend 
            npm install 
            npm run test 

  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan frontend 
          command: |
            cd frontend 
            npm install
            npm audit fix --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan frontend 
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists test
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist test
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory test hello
          command: |
            aws cloudformation describe-stacks \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[0].OutputValue" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
          # workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  


  
  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["a2:bc:36:df:e2:ca:ed:35:10:e5:45:9c:49:9d:2e:6e"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add curl
  #           apk add --upgrade bash
  #           apk add --update ansible
  #           apk add openssh-client
  #           pip3 install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           # cat ~/project/.circleci/ansible/inventory.txt
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml    
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  



  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
      - run:
          name: Sending migration status to kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
      - destroy-environment
          # workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

    #     - revert-migrations
  #     - destroy-environment    
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs              

      # - run:
      #     name: Install node
      #     command: |
      #       curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
      #       export NVM_DIR="$HOME/.nvm"
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      #       nvm install 16

      # - run:
      #     name: Install ansible and awscli
      #     command: |
      #       pip3 install ansible
      #       pip3 install awscli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_PUBLIC_IP=$(aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.7-node
    steps:
      # Checkout code from git
      - checkout       
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a2:bc:36:df:e2:ca:ed:35:10:e5:45:9c:49:9d:2e:6e"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install aws dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
#              pip install --upgrade
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -v
      # Here's where you will add some code to rollback on failure  
      # - revert-migrations
      #   workflow_id:
      # - destroy-environment   
      #   workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'    

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      # - run:
      #     name: Install dependencies
      #     command: |
      #       yum -y install jq tar gzip git curl
      # - install_awscli
      - run:
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            # sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin

      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       export BACKEND_PUBLIC_IP=$(aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
      #       export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
      #       echo "${API_URL}"  #   curl -s ${API_URL}/api/status -v 
      #       if curl -s ${API_URL}/api/status | grep "ok"
      #       then
      #         exit 0
      #       else
      #         exit 1
      #       fi       

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi

   
      - destroy-environment  
      - revert-migrations

  

  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean test
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"  
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment
      - revert-migrations
      


      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: [build-frontend]

      - test-backend: 
          requires: [build-backend] 

      - scan-frontend:
          requires: [build-frontend] 
      - scan-backend: 
          requires: [build-backend]

      - deploy-infrastructure:
          requires: [test-frontend,test-backend,scan-frontend,scan-backend]

      # - configure-infrastructure: 
      #     requires: [deploy-infrastructure]

      - run-migrations:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

      - cloudfront-update: 
          requires: [smoke-test]
          

          